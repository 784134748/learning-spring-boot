<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN' 'http://mybatis.org/dtd/mybatis-3-mapper.dtd' >
<mapper namespace='com.yalonglee.learning.account.mapper.AccountLogMapper'>

    <!--一串华丽的分割线,分割线内禁止任何形式的修改-->

    <resultMap id='BaseResultMap' type='com.yalonglee.learning.account.model.AccountLogModel'>
        <constructor>
            <idArg column='id' javaType='java.lang.Long'/>
            <arg column='serial_number' javaType='java.lang.String'/>
            <arg column='target_id' javaType='java.lang.Long'/>
            <arg column='transaction_from' javaType='java.lang.Integer'/>
            <arg column='currency_base_uuid' javaType='java.lang.String'/>
            <arg column='account_record_id' javaType='java.lang.Long'/>
            <arg column='account_record_index' javaType='java.lang.Integer'/>
            <arg column='from_account_record_id' javaType='java.lang.Long'/>
            <arg column='from_account_record_index' javaType='java.lang.Integer'/>
            <arg column='account_addr' javaType='java.lang.String'/>
            <arg column='available_amount' javaType='java.lang.Double'/>
            <arg column='frozen_amount' javaType='java.lang.Double'/>
            <arg column='gmt_create' javaType='java.time.LocalDateTime'/>
            <arg column='gmt_modified' javaType='java.time.LocalDateTime'/>
        </constructor>
        <result property='id' column='id'/>
        <result property='serialNumber' column='serial_number'/>
        <result property='targetId' column='target_id'/>
        <result property='transactionFrom' column='transaction_from'/>
        <result property='currencyBaseUuid' column='currency_base_uuid'/>
        <result property='accountRecordId' column='account_record_id'/>
        <result property='accountRecordIndex' column='account_record_index'/>
        <result property='fromAccountRecordId' column='from_account_record_id'/>
        <result property='fromAccountRecordIndex' column='from_account_record_index'/>
        <result property='accountAddr' column='account_addr'/>
        <result property='availableAmount' column='available_amount'/>
        <result property='frozenAmount' column='frozen_amount'/>
        <result property='gmtCreate' column='gmt_create'/>
        <result property='gmtModified' column='gmt_modified'/>
    </resultMap>

    <sql id='Base_Column_List'>
    account_log.`id`, account_log.`serial_number`, account_log.`target_id`, account_log.`transaction_from`, account_log.`currency_base_uuid`, account_log.`account_record_id`, account_log.`account_record_index`, account_log.`from_account_record_id`, account_log.`from_account_record_index`, account_log.`account_addr`, account_log.`available_amount`, account_log.`frozen_amount`, account_log.`gmt_create`, account_log.`gmt_modified`
    </sql>

    <select id='selectByPrimaryKey' resultMap='BaseResultMap'
            parameterType='java.lang.Long'>
        select 
        <include refid='Base_Column_List'/>
        from account_log 
        where account_log.`id` = #{id}
    </select>

    <select id='selectOneByQuery' resultMap='BaseResultMap'
            parameterType='com.yalonglee.learning.account.model.AccountLogModel'>
        select 
        <include refid='Base_Column_List'/>
        from account_log 
        <where>
            <include refid='query_filter'/>
        </where>
        Limit 1
    </select>

    <select id='selectByQuery' resultMap='BaseResultMap'>
        select 
        <include refid='Base_Column_List'/>
        from account_log 
        <where>
            <include refid='query_filter'/>
        </where>
        <if test='start != null and end != null'>
            limit #{start}, #{end}
        </if>
    </select>

    <delete id='deleteByPrimaryKey' parameterType='java.lang.Long'>
        delete from account_log where account_log.`id` = #{id}
    </delete>
    <delete id='deleteByQuery' parameterType='com.yalonglee.learning.account.model.AccountLogModel'>
        delete from account_log
        <where>
            <include refid='query_filter'/>
        </where>
    </delete>

    <select id='count' resultType='java.lang.Integer' parameterType='com.yalonglee.learning.account.model.AccountLogModel'>
        select count(*) from account_log
        <where>
            <include refid='query_filter'/>
        </where>
    </select>

    <insert id='insert' parameterType='com.yalonglee.learning.account.model.AccountLogModel' useGeneratedKeys='true' keyProperty='id'>
        insert into account_log
        <trim prefix='(' suffix=')' suffixOverrides=','>
            <if test='id != null'>account_log.`id`,</if>
            <if test='serialNumber != null'>account_log.`serial_number`,</if>
            <if test='targetId != null'>account_log.`target_id`,</if>
            <if test='transactionFrom != null'>account_log.`transaction_from`,</if>
            <if test='currencyBaseUuid != null'>account_log.`currency_base_uuid`,</if>
            <if test='accountRecordId != null'>account_log.`account_record_id`,</if>
            <if test='accountRecordIndex != null'>account_log.`account_record_index`,</if>
            <if test='fromAccountRecordId != null'>account_log.`from_account_record_id`,</if>
            <if test='fromAccountRecordIndex != null'>account_log.`from_account_record_index`,</if>
            <if test='accountAddr != null'>account_log.`account_addr`,</if>
            <if test='availableAmount != null'>account_log.`available_amount`,</if>
            <if test='frozenAmount != null'>account_log.`frozen_amount`,</if>
            account_log.`gmt_create`,
            account_log.`gmt_modified`,
        </trim>
        <trim prefix='values (' suffix=')' suffixOverrides=','>
            <if test='id != null'>#{id},</if>
            <if test='serialNumber != null'>#{serialNumber},</if>
            <if test='targetId != null'>#{targetId},</if>
            <if test='transactionFrom != null'>#{transactionFrom},</if>
            <if test='currencyBaseUuid != null'>#{currencyBaseUuid},</if>
            <if test='accountRecordId != null'>#{accountRecordId},</if>
            <if test='accountRecordIndex != null'>#{accountRecordIndex},</if>
            <if test='fromAccountRecordId != null'>#{fromAccountRecordId},</if>
            <if test='fromAccountRecordIndex != null'>#{fromAccountRecordIndex},</if>
            <if test='accountAddr != null'>#{accountAddr},</if>
            <if test='availableAmount != null'>#{availableAmount},</if>
            <if test='frozenAmount != null'>#{frozenAmount},</if>
            now(),
            now(),
        </trim>
    </insert>

    <update id='fullUpdate' parameterType='com.yalonglee.learning.account.model.AccountLogModel'>
        update account_log
        <set>
            account_log.`serial_number` = #{serialNumber},
            account_log.`target_id` = #{targetId},
            account_log.`transaction_from` = #{transactionFrom},
            account_log.`currency_base_uuid` = #{currencyBaseUuid},
            account_log.`account_record_id` = #{accountRecordId},
            account_log.`account_record_index` = #{accountRecordIndex},
            account_log.`from_account_record_id` = #{fromAccountRecordId},
            account_log.`from_account_record_index` = #{fromAccountRecordIndex},
            account_log.`account_addr` = #{accountAddr},
            account_log.`available_amount` = #{availableAmount},
            account_log.`frozen_amount` = #{frozenAmount},
            account_log.`gmt_modified` = now(),
        </set>
        where account_log.id = #{id}
    </update>

    <update id='incUpdate' parameterType='com.yalonglee.learning.account.model.AccountLogModel'>
        update account_log
        <set>
            <if test='serialNumber != null'>account_log.`serial_number` = #{serialNumber},</if>
            <if test='targetId != null'>account_log.`target_id` = #{targetId},</if>
            <if test='transactionFrom != null'>account_log.`transaction_from` = #{transactionFrom},</if>
            <if test='currencyBaseUuid != null'>account_log.`currency_base_uuid` = #{currencyBaseUuid},</if>
            <if test='accountRecordId != null'>account_log.`account_record_id` = #{accountRecordId},</if>
            <if test='accountRecordIndex != null'>account_log.`account_record_index` = #{accountRecordIndex},</if>
            <if test='fromAccountRecordId != null'>account_log.`from_account_record_id` = #{fromAccountRecordId},</if>
            <if test='fromAccountRecordIndex != null'>account_log.`from_account_record_index` = #{fromAccountRecordIndex},</if>
            <if test='accountAddr != null'>account_log.`account_addr` = #{accountAddr},</if>
            <if test='availableAmount != null'>account_log.`available_amount` = #{availableAmount},</if>
            <if test='frozenAmount != null'>account_log.`frozen_amount` = #{frozenAmount},</if>
            account_log.`gmt_modified` = now(),
        </set>
        where account_log.`id` = #{id}
    </update>

    <sql id='query_filter'>
        <if test='t.id != null'>and account_log.`id` = #{t.id}</if>
        <if test='t.serialNumber != null'>and account_log.`serial_number` = #{t.serialNumber}</if>
        <if test='t.targetId != null'>and account_log.`target_id` = #{t.targetId}</if>
        <if test='t.transactionFrom != null'>and account_log.`transaction_from` = #{t.transactionFrom}</if>
        <if test='t.currencyBaseUuid != null'>and account_log.`currency_base_uuid` = #{t.currencyBaseUuid}</if>
        <if test='t.accountRecordId != null'>and account_log.`account_record_id` = #{t.accountRecordId}</if>
        <if test='t.accountRecordIndex != null'>and account_log.`account_record_index` = #{t.accountRecordIndex}</if>
        <if test='t.fromAccountRecordId != null'>and account_log.`from_account_record_id` = #{t.fromAccountRecordId}</if>
        <if test='t.fromAccountRecordIndex != null'>and account_log.`from_account_record_index` = #{t.fromAccountRecordIndex}</if>
        <if test='t.accountAddr != null'>and account_log.`account_addr` = #{t.accountAddr}</if>
        <if test='t.availableAmount != null'>and account_log.`available_amount` = #{t.availableAmount}</if>
        <if test='t.frozenAmount != null'>and account_log.`frozen_amount` = #{t.frozenAmount}</if>
        <if test='t.gmtCreate != null'>and account_log.`gmt_create` = #{t.gmtCreate}</if>
        <if test='t.gmtModified != null'>and account_log.`gmt_modified` = #{t.gmtModified}</if>
    </sql>

    <!--一串华丽的分割线,分割线内禁止任何形式的修改-->

</mapper>
