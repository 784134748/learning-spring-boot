<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE mapper PUBLIC '-//mybatis.org//DTD Mapper 3.0//EN' 'http://mybatis.org/dtd/mybatis-3-mapper.dtd' >
<mapper namespace='com.yalonglee.learning.account.mapper.AccountRecordMapper'>

    <!--一串华丽的分割线,分割线内禁止任何形式的修改-->

    <resultMap id='BaseResultMap' type='com.yalonglee.learning.account.model.AccountRecordModel'>
        <constructor>
            <idArg column='id' javaType='java.lang.Long'/>
            <arg column='serial_number' javaType='java.lang.String'/>
            <arg column='account_addr' javaType='java.lang.String'/>
            <arg column='available_amount' javaType='java.lang.Double'/>
            <arg column='frozen_amount' javaType='java.lang.Double'/>
            <arg column='index' javaType='java.lang.Integer'/>
            <arg column='source_account_addr' javaType='java.lang.String'/>
            <arg column='gmt_effect' javaType='java.time.LocalDateTime'/>
            <arg column='gmt_create' javaType='java.time.LocalDateTime'/>
            <arg column='gmt_modified' javaType='java.time.LocalDateTime'/>
        </constructor>
        <result property='id' column='id'/>
        <result property='serialNumber' column='serial_number'/>
        <result property='accountAddr' column='account_addr'/>
        <result property='availableAmount' column='available_amount'/>
        <result property='frozenAmount' column='frozen_amount'/>
        <result property='index' column='index'/>
        <result property='sourceAccountAddr' column='source_account_addr'/>
        <result property='gmtEffect' column='gmt_effect'/>
        <result property='gmtCreate' column='gmt_create'/>
        <result property='gmtModified' column='gmt_modified'/>
    </resultMap>

    <sql id='Base_Column_List'>
    account_record.`id`, account_record.`serial_number`, account_record.`account_addr`, account_record.`available_amount`, account_record.`frozen_amount`, account_record.`index`, account_record.`source_account_addr`, account_record.`gmt_effect`, account_record.`gmt_create`, account_record.`gmt_modified`
    </sql>

    <select id='selectByPrimaryKey' resultMap='BaseResultMap'
            parameterType='java.lang.Long'>
        select
        <include refid='Base_Column_List'/>
        from account_record
        where account_record.`id` = #{id}
    </select>

    <select id='selectOneByQuery' resultMap='BaseResultMap'
            parameterType='com.yalonglee.learning.account.model.AccountRecordModel'>
        select
        <include refid='Base_Column_List'/>
        from account_record
        <where>
            <include refid='query_filter'/>
        </where>
        Limit 1
    </select>

    <select id='selectByQuery' resultMap='BaseResultMap'>
        select
        <include refid='Base_Column_List'/>
        from account_record
        <where>
            <include refid='query_filter'/>
        </where>
        <if test='start != null and end != null'>
            limit #{start}, #{end}
        </if>
    </select>

    <delete id='deleteByPrimaryKey' parameterType='java.lang.Long'>
        delete from account_record where account_record.`id` = #{id}
    </delete>
    <delete id='deleteByQuery' parameterType='com.yalonglee.learning.account.model.AccountRecordModel'>
        delete from account_record
        <where>
            <include refid='query_filter'/>
        </where>
    </delete>

    <select id='count' resultType='java.lang.Integer'
            parameterType='com.yalonglee.learning.account.model.AccountRecordModel'>
        select count(*) from account_record
        <where>
            <include refid='query_filter'/>
        </where>
    </select>

    <insert id='insert' parameterType='com.yalonglee.learning.account.model.AccountRecordModel' useGeneratedKeys='true'
            keyProperty='id'>
        insert into account_record
        <trim prefix='(' suffix=')' suffixOverrides=','>
            <if test='id != null'>account_record.`id`,</if>
            <if test='serialNumber != null'>account_record.`serial_number`,</if>
            <if test='accountAddr != null'>account_record.`account_addr`,</if>
            <if test='availableAmount != null'>account_record.`available_amount`,</if>
            <if test='frozenAmount != null'>account_record.`frozen_amount`,</if>
            <if test='index != null'>account_record.`index`,</if>
            <if test='sourceAccountAddr != null'>account_record.`source_account_addr`,</if>
            <if test='gmtEffect != null'>account_record.`gmt_effect`,</if>
            account_record.`gmt_create`,
            account_record.`gmt_modified`,
        </trim>
        <trim prefix='values (' suffix=')' suffixOverrides=','>
            <if test='id != null'>#{id},</if>
            <if test='serialNumber != null'>#{serialNumber},</if>
            <if test='accountAddr != null'>#{accountAddr},</if>
            <if test='availableAmount != null'>#{availableAmount},</if>
            <if test='frozenAmount != null'>#{frozenAmount},</if>
            <if test='index != null'>#{index},</if>
            <if test='sourceAccountAddr != null'>#{sourceAccountAddr},</if>
            <if test='gmtEffect != null'>#{gmtEffect},</if>
            now(),
            now(),
        </trim>
    </insert>

    <update id='fullUpdate' parameterType='com.yalonglee.learning.account.model.AccountRecordModel'>
        update account_record
        <set>
            account_record.`serial_number` = #{serialNumber},
            account_record.`account_addr` = #{accountAddr},
            account_record.`available_amount` = #{availableAmount},
            account_record.`frozen_amount` = #{frozenAmount},
            account_record.`index` = #{index},
            account_record.`source_account_addr` = #{sourceAccountAddr},
            account_record.`gmt_effect` = #{gmtEffect},
            account_record.`gmt_modified` = now(),
        </set>
        where account_record.id = #{id}
    </update>

    <update id='incUpdate' parameterType='com.yalonglee.learning.account.model.AccountRecordModel'>
        update account_record
        <set>
            <if test='serialNumber != null'>account_record.`serial_number` = #{serialNumber},</if>
            <if test='accountAddr != null'>account_record.`account_addr` = #{accountAddr},</if>
            <if test='availableAmount != null'>account_record.`available_amount` = #{availableAmount},</if>
            <if test='frozenAmount != null'>account_record.`frozen_amount` = #{frozenAmount},</if>
            <if test='index != null'>account_record.`index` = #{index},</if>
            <if test='sourceAccountAddr != null'>account_record.`source_account_addr` = #{sourceAccountAddr},</if>
            <if test='gmtEffect != null'>account_record.`gmt_effect` = #{gmtEffect},</if>
            account_record.`gmt_modified` = now(),
        </set>
        where account_record.`id` = #{id}
    </update>

    <sql id='query_filter'>
        <if test='t.id != null'>and account_record.`id` = #{t.id}</if>
        <if test='t.serialNumber != null'>and account_record.`serial_number` = #{t.serialNumber}</if>
        <if test='t.accountAddr != null'>and account_record.`account_addr` = #{t.accountAddr}</if>
        <if test='t.availableAmount != null'>and account_record.`available_amount` = #{t.availableAmount}</if>
        <if test='t.frozenAmount != null'>and account_record.`frozen_amount` = #{t.frozenAmount}</if>
        <if test='t.index != null'>and account_record.`index` = #{t.index}</if>
        <if test='t.sourceAccountAddr != null'>and account_record.`source_account_addr` = #{t.sourceAccountAddr}</if>
        <if test='t.gmtEffect != null'>and account_record.`gmt_effect` = #{t.gmtEffect}</if>
        <if test='t.gmtCreate != null'>and account_record.`gmt_create` = #{t.gmtCreate}</if>
        <if test='t.gmtModified != null'>and account_record.`gmt_modified` = #{t.gmtModified}</if>
    </sql>

    <!--一串华丽的分割线,分割线内禁止任何形式的修改-->

    <insert id="batchInsert" parameterType="java.util.List">
        insert into account_record
        <trim prefix='(' suffix=')' suffixOverrides=','>
            account_record.`id`,
            account_record.`serial_number`,
            account_record.`account_addr`,
            account_record.`available_amount`,
            account_record.`frozen_amount`,
            account_record.`index`,
            account_record.`source_account_addr`,
            account_record.`gmt_create`,
            account_record.`gmt_modified`,
        </trim>
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.id},
            #{item.serialNumber},
            #{item.accountAddr},
            #{item.accountRecordAvailableAmount},
            #{item.accountRecordFrozenAmount},
            #{item.index},
            #{item.sourceAccountAddr},
            now(),
            now())
        </foreach>
    </insert>

    <update id="batchUpdateAvailableAmountToZero" parameterType="java.util.List">
        <foreach collection="updateUseUpAccountRecordInfoList" item="item" index="index" separator=";">
            update account_record set account_record.`available_amount` = 0, account_record.`index` =
            account_record.`index` = #{item.index} where account_record.id = #{item.accountRecordId}
        </foreach>
    </update>

    <select id='queryCompleteTransferAccountRecordInfoList'
            resultType="com.yalonglee.learning.account.utils.account.CompleteTransferAccountRecordInfo">
        SELECT TMP.account_record_row_no, TMP.sum as sum_account_record_available_amount, TMP.account_addr, TMP.account_record_id, TMP.index, TMP.available_amount as account_record_available_amount, TMP.frozen_amount as account_record_frozen_amount
        FROM (
            SELECT
                (@row_no :=@row_no + 1) as account_record_row_no, (CASE WHEN #{amount} > @sum THEN @sum := @sum + available_amount ELSE NULL END) AS sum, a.id as account_record_id, a.index, a.account_addr, a.available_amount, a.frozen_amount
            FROM (select id, account_record.`index`, account_addr, available_amount, frozen_amount from account_record where account_addr=#{accountAddr} and available_amount > 0) a, (select @sum :=0) b, (select @row_no :=0) c order by a.available_amount
        )AS TMP
        WHERE TMP.sum is not null order by sum desc;
    </select>

</mapper>
